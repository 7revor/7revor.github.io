{"remainingRequest":"/Users/7revor/WebstormProjects/vue_press/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/7revor/WebstormProjects/vue_press/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/7revor/WebstormProjects/vue_press/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/7revor/WebstormProjects/vue_press/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/7revor/WebstormProjects/vue_press/docs/React/closeKeyBoard.md?vue&type=template&id=3f28e620&","dependencies":[{"path":"/Users/7revor/WebstormProjects/vue_press/docs/React/closeKeyBoard.md","mtime":1553499046038},{"path":"/Users/7revor/WebstormProjects/vue_press/node_modules/cache-loader/dist/cjs.js","mtime":1553505755456},{"path":"/Users/7revor/WebstormProjects/vue_press/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1553505756301},{"path":"/Users/7revor/WebstormProjects/vue_press/node_modules/cache-loader/dist/cjs.js","mtime":1553505755456},{"path":"/Users/7revor/WebstormProjects/vue_press/node_modules/vue-loader/lib/index.js","mtime":1553505756301},{"path":"/Users/7revor/WebstormProjects/vue_press/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":1553505767409}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"现状\\\"><a href=\\\"#现状\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 现状</h2> <p>QAP安卓端在弹出键盘时，我们点击键盘上的完成按钮，键盘会自动收起。如果输入完成后未点击完成按钮，直接点击保存等相关操作，那么呼出的这个键盘就会一直保留在界面上。\\n我们现有的解决方式是给Input组件添加ref属性</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token operator\\\">&lt;</span>Input ref<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'textInput'</span><span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&gt;</span>\\n</code></pre></div><p>然后再保存或者其他操作中，手动让输入框失去焦点来关闭键盘</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token function\\\">save</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>refs<span class=\\\"token punctuation\\\">.</span> textInput<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">blur</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"缺点\\\"><a href=\\\"#缺点\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 缺点</h2> <p>这种处理方式在界面中输入框较少时比较好用。但如果这个输入框是动态生成的（追加don节点的方式，无法为动态生成的组件标记ref），又或者界面中有十几个Input组件，那就行不通了。\\n这时候可以采取此种解决方式：</p> <h2 id=\\\"优化\\\"><a href=\\\"#优化\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 优化</h2> <p>首先，在需要调用Input的页面（可以是弹窗），对Input做处理：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span>Input<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'nuke'</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyPage</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Component</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">props</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//对input的原型进行修改，让所有的input实例获得焦点时都触发此方法</span>\\n  <span class=\\\"token class-name\\\">Input</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">focusHandler</span><span class=\\\"token operator\\\">=</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">element</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//e中的currentTarget为当前获取焦点的组件实例，也就是通过this.refs.textInput获取到的dom</span>\\n  Input<span class=\\\"token punctuation\\\">.</span>currentTarget <span class=\\\"token operator\\\">=</span> element<span class=\\\"token punctuation\\\">.</span>currentTarget<span class=\\\"token comment\\\">//为Input类添加静态属性，即当前被激活的Input实例</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>这样一来，我们在保存方法中就可以直接</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>  Input<span class=\\\"token punctuation\\\">.</span>currentTarget<span class=\\\"token operator\\\">&amp;&amp;</span>Input<span class=\\\"token punctuation\\\">.</span>currentTarget<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">blur</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>这样就可以实现关闭键盘的功能，界面中再多的输入框也不怕了。</p> <h3 id=\\\"注意点：\\\"><a href=\\\"#注意点：\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 注意点：</h3> <p>如果你的页面是弹窗等组件，在保存后需要执行组件销毁，这里要注意blur方法是一个异步方法，由于js是单线程，这个方法不会立即执行，而是会被放入任务队列，在你的当前代码执行完毕（也就是所有的同步代码执行完毕）后才会调用。这样一来，销毁组件就会发生在你的blur事件之前，那么blur也就不会生效了。\\n解决方式利用setTimeout，由于setTimeout中的方法也不会立即执行，而是在计时器结束后被放入任务队列，那么我们的blur代码在任务队列中的执行顺序就会在组件销毁之前了</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>Input<span class=\\\"token punctuation\\\">.</span>currenttarget<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">blur</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token comment\\\">//处理代码逻辑</span>\\n<span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">=&gt;</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">destory</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token comment\\\">//销毁组件</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>这样一来，<code>blur()</code>方法就可以正常执行了</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}